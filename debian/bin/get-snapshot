#!/bin/bash

# Copyright 2015-2017 Alf Gaida <agaida@siduction.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#=============================================================================

# Usage: get-snapshot (in package dir)
# One will need a debian/repository.spec file in place

unset commit
unset branch
target_dir="snapshot"

[ ! -d debian ] && echo "No debian dir found!" && exit 1

if [ -f "debian/repository.spec" ]; then
    source debian/repository.spec
else
    echo "File debian/repository.spec not found!"
    echo "Copied example spec to debian/"
    cp /usr/share/lxqt-build-tools/repository.spec.example debian/repository.spec
    exit 2;
fi

ls | grep -v "debian" | xargs rm -rf
rm -rf .pc

echo ""
echo "┌───────────────────┐"
echo "│ Upstream Settings │"
echo "└───────────────────┘"
[ ! -z "${repository}" ] && echo "repository: ${repository}"
[ ! -z "${branch}" ] && echo "branch: ${branch}"
[ ! -z "${commit}" ] && echo "commit: ${commit}"
[ ! -z "${target_dir}" ] && echo "target_dir: ${target_dir}"
echo ""

declare -f "cleanup"
declared=$?
echo ""

snapdir=$(mktemp -d)

pushd "$snapdir" &>/dev/null
    echo "git clone ${branch} ${repository} ${target_dir}"
    git clone ${branch} ${repository} ${target_dir}
    pushd snapshot &>/dev/null
        [  ! -z "${commit}" ] &&  git reset --hard "${commit}"
        description=$(git describe --tags)
        # cleanup must be defined in repository
        [ "$declared" ] && cleanup
    popd &>/dev/null
    tar cfJ snapshot.orig.tar.xz snapshot
popd &>/dev/null
tar xf "$snapdir/snapshot.orig.tar.xz" --strip-components 1
echo ""
echo "New snapshot: $description"
dch "New snapshot: $description"
rm -rf "$snapdir"
