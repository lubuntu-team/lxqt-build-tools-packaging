#!/bin/bash

# Copyright 2015-2019 Alf Gaida <agaida@siduction.org>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#=============================================================================

# Usage: get-snapshot (in package dir)
# One will need a debian/repository.spec file in place


usage()
{
cat << EOF
usage: $0 options

#ToDo Write some useful description

OPTIONS:
  -h      Show this message
  -b      build (default="yes")
  -c      clean (default="yes")
  -g      git commit (default="yes")
  -n      dryrun (aka. do nothing default="no")
  -p      git push (default="yes")
  -u      upload (default="yes")
EOF
}


build="yes"
clean="yes"
gitcommit="yes"
push="yes"
upload="yes"
dryrun="no"

unset commit
unset branch
target_dir="snapshot"

[ ! -d debian ] && echo "No debian dir found!" && exit 1

if [ -f "debian/repository.spec" ]; then
    source debian/repository.spec
else
    echo "File debian/repository.spec not found!"
    echo "Copied example spec to debian/"
    cp /usr/share/lxqt-build-tools/repository.spec.example debian/repository.spec
    exit 2;
fi

while getopts “b:c:g:u:hn” OPTION; do
    case ${OPTION} in
        h) usage
           exit
           ;;
        b) build=${OPTARG}
           ;;
        c) clean=${OPTARG}
           ;;
        g) gitcommit=${OPTARG}
           ;;
        n) dryrun="yes";
           echo -e "\n\n ... dry run ... \n\n"
           ;;
        p) push=${OPTARG}
           ;;
        u) upload=${OPTARG}
           ;;
    esac
done

if [ "$dryrun" = "yes" ]; then
    build="no"
    clean="no"
    gitcommit="no"
    push="no"
    upload="no"
fi


if [ "$dryrun" = "no" ]; then
    debclean -d
    ls | grep -v "debian" | xargs rm -rf
    rm -rf .pc
fi

echo ""
echo "┌───────────────────┐"
echo "│ Upstream Settings │"
echo "└───────────────────┘"
[ ! -z "${repository}" ] && echo "repository: ${repository}"
[ ! -z "${branch}" ] && echo "branch: ${branch}"
[ ! -z "${commit}" ] && echo "commit: ${commit}"
[ ! -z "${target_dir}" ] && echo "target_dir: ${target_dir}"
echo ""

declare -f "cleanup"
declared=$?
echo ""

snapdir=$(mktemp -d)

pushd "$snapdir" &>/dev/null
    echo "git clone ${branch} ${repository} ${target_dir}"
    git clone ${branch} ${repository} ${target_dir}
    pushd snapshot &>/dev/null
        [  ! -z "${commit}" ] &&  git reset --hard "${commit}"
        description=$(git describe --tags)
        commitsaftertag=$(git describe --tags | sed "s#[^-]*-##")
        echo "ERRORCODE $?"
        # cleanup must be defined in repository
        [ "$declared" ] && cleanup
    popd &>/dev/null
    tar cfJ snapshot.orig.tar.xz snapshot
popd &>/dev/null

if [ "$dryrun" = "no" ]; then
    tar xf "$snapdir/snapshot.orig.tar.xz" --strip-components 1
    rm -rf "$snapdir"
fi

# New Version
currentversion=$(dpkg-parsechangelog -S version)
newversion="${baseversion}${commitsaftertag}-1"

if [ ! "$currentversion" "==" "$newversion" ]; then
    echo -e "\n\nCurrent Version: $currentversion"
    echo -e "New Version: $newversion\n\n"
else
   echo -e "\n\nCurrent Version: $currentversion"
   echo -e "New Version: $newversion\n\n"
   echo -e "\n\nkeine neue version\n\n"
   exit 0 # should be handled with a variable
fi

# Add a new entry to debian changelog
if [ "$dryrun" = "no" ]; then
    dch --newversion "$newversion" \
        --distribution "${distribution}" \
        --force-distribution \
        "New snapshot: $description"
fi

# commit changes to git
if [ "gitcommit" = "yes" ]; then
    echo "gitcommit: $gitcommit"
    git add --all
    git commit -m "New snapshot: $description"
    git push
fi

# clean up old builds
if [ "$clean" = "yes" ]; then
    echo "clean: $clean"
    echo "dryrun: $dryrun"
    debclean
fi

# build a source package
if [ "$build" = "yes" ]; then
    echo "build: $build"
    echo "dryrun: $dryrun"
    debuild -S
fi

# upload source package
if [ "$upload" = "yes" ]; then
    echo "upload: $upload"
    echo "dryrun: $dryrun"
    uploads=$(ls ../*changes)
    for i in $uploads; do
        dput $uploadrepo $i
    done
fi

# git commit
if [ "$gitcommit" = "yes" ]; then
    echo "gitcommit: $gitcommit"
    echo "dryrun: $dryrun"
    git add --all
    git commit -m "New snapshot: $newversion"
fi

# git push
if [ "$push" = "yes" ]; then
    echo "push: $push"
    echo "dryrun: $dryrun"
    git push
fi

